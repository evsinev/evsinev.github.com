<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://evsinev.github.com/atom.xml" rel="self"/>
  <link href="http://evsinev.github.com/"/>
  <updated>2013-06-09T20:33:45+04:00</updated>
  <id>http://evsinev.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[handler-socket]]></title>
    <link href="http://evsinev.github.com/blog/2013/03/31/handler-socket/"/>
    <updated>2013-03-31T16:16:00+04:00</updated>
    <id>http://evsinev.github.com/blog/2013/03/31/handler-socket</id>
    <content type="html"><![CDATA[<ol>
<li>Building Handlersocket</li>
</ol>


<p> Handlersocket mainly consists of libhsclient, handlersocket, and C++/Perl clients. libhsclient is a common library shared from both client and server(plugin). handlersocket is a MySQL daemon plugin.
 To build Handlersocket, you need both MySQL source code and MySQL binary. It is not required to pre-build MySQL source code, but source itself is needed because Handlersocket depends on MySQL header files that only MySQL source distribution contains. MySQL binary is just a normal MySQL binary distribution. You can use official MySQL binaries provided by Oracle.
 Since Handlersocket uses daemon plugin interface supported from MySQL 5.1,
MySQL 5.1 or higher version is required.
 Please make sure that you use identical MySQL version between MySQL source
and MySQL binary. Otherwise you might encounter serious problems (i.e. server
crash, etc).
 Here are steps to build Handlersocket.</p>

<ul>
<li><p>Get MySQL source code</p></li>
<li><p>Get MySQL binary</p></li>
<li><p>Build Handlersocket
$ ./autogen.sh
$ ./configure &#8211;with-mysql-source=/work/mysql-5.1.50 &#8211;with-mysql-bindir=/work/mysql-5.1.50-linux-x86_64-glibc23/bin  &#8211;with-mysql-plugindir=/work/mysql-5.1.50-linux-x86_64-glibc23/lib/plugin</p></li>
</ul>


<p> &#8211;with-mysql-source refers to the top of MySQL source directory (which
contains the VERSION file or the configure.in file), &#8211;with-mysql-bindir
refers to where MySQL binary executables (i.e. mysql_config) are located,
and &#8211;with-mysql-plugindir refers to a plugin directory where plugin
libraries (*.so) are installed.</p>

<p>  $ make
  $ sudo make install</p>

<p> Both libhsclient and the handlersocket plugin will be installed.</p>

<ol>
<li>Using Handlersocket</li>
</ol>


<p>Append configuration options for handlersocket to my.cnf.</p>

<p>  [mysqld]
  loose_handlersocket_port = 9998</p>

<pre><code># the port number to bind to (for read requests)
</code></pre>

<p>  loose_handlersocket_port_wr = 9999</p>

<pre><code># the port number to bind to (for write requests)
</code></pre>

<p>  loose_handlersocket_threads = 16</p>

<pre><code># the number of worker threads (for read requests)
</code></pre>

<p>  loose_handlersocket_threads_wr = 1</p>

<pre><code># the number of worker threads (for write requests)
</code></pre>

<p>  open_files_limit = 65535</p>

<pre><code># to allow handlersocket accept many concurrent
# connections, make open_files_limit as large as
# possible.
</code></pre>

<p>Log in to mysql as root, and execute the following query.</p>

<p>  mysql> install plugin handlersocket soname &#8216;handlersocket.so&#8217;;</p>

<p>If handlersocket.so is successfully installed, it starts
accepting connections on port 9998 and 9999. Running
&#8216;show processlist&#8217; should show handlersocket worker threads.</p>

<hr />

<p>On the client side, you need to install libhsclient for c++ apps
and perl-Net-HandlerSocket for perl apps. They do not require
MySQL to compile.</p>

<p>  $ ./autogen.sh
  $ ./configure &#8211;disable-handlersocket-server
  $ make
  $ sudo make install
  $ cd perl-Net-HandlerSocket
  $ perl Makefile.PL
  $ make
  $ sudo make install</p>

<hr />

<p>Alternatively, you can use the rpm installation. If your OS
supports rpms, you can use the following commands to build and
install handlersocket rpm packages.</p>

<p>(Server side, installs HandlerSocket plugin)
  $ ./autogen.sh
  $ ./configure &#8211;with-mysql-source=/work/mysql-5.1.50 &#8211;with-mysql-bindir=/work/mysql-5.1.50-linux-x86_64-glibc23/bin  &#8211;with-mysql-plugindir=/work/mysql-5.1.50-linux-x86_64-glibc23/lib/plugin
  $ make rpm_cli
  $ sudo rpm -U dist/RPMS/<em>/libhsclient</em>.rpm
  $ make rpm_c
  $ sudo rpm -U dist/RPMS/<em>/handlersocket</em>.rpm</p>

<p>(Client side, installs client libraries)
  $ ./autogen.sh
  $ ./configure &#8211;disable-handlersocket-server
  $ make rpm_cli
  $ sudo rpm -U dist/RPMS/<em>/libhsclient</em>.rpm
  $ make rpm_perl
  $ sudo rpm -U dist/RPMS/<em>/perl-Net-HandlerSocket</em>.rpm</p>

<hr />

<p>The HandlerSocket protocol</p>

<hr />

<p>Basic syntax</p>

<ul>
<li>The HandlerSocket protocol is line-based. Each line ends with LF(0x0a).</li>
<li>Each line consists a concatenation of tokens separated by HT(0x09).</li>
<li>A token is either NULL or an encoded string. Note that you need to
distinguish NULL from an empty string, as most DBMs does so.</li>
<li>NULL is expressed as a single NUL(0x00).</li>
<li>An encoded string is a string with the following encoding rules.

<ul>
<li>Characters in the range [0x10 - 0xff] are encoded as itselves.</li>
<li>A character in the range [0x00 - 0x0f] is prefixed by 0x01 and
shifted by 0x40. For example, 0x03 is encoded as 0x01 0x43.</li>
</ul>
</li>
<li>Note that a string can be empty. A continuation of 0x09 0x09 means that
there is an empty string between them. A continuation of 0x09 0x0a means
that there is an empty string at the end of the line.</li>
</ul>


<hr />

<p>Request and Response</p>

<ul>
<li>The HandlerSocket protocol is a simple request/response protocol. After a
connection is established, the client side sends a request, and then the
server side sends a response.</li>
<li>A request/response consists of a single line.</li>
<li>Requests can be pipelined; That is, you can send multiple requests (ie.
lines) at one time, and receive responses for them at one time.</li>
</ul>


<hr />

<p>Opening index</p>

<p>The &#8216;open_index&#8217; request has the following syntax.</p>

<pre><code>P &lt;indexid&gt; &lt;dbname&gt; &lt;tablename&gt; &lt;indexname&gt; &lt;columns&gt; [&lt;fcolumns&gt;]
</code></pre>

<ul>
<li><indexid> is a number in decimal.</li>
<li><dbname>, <tablename>, and <indexname> are strings. To open the primary
key, use PRIMARY as <indexname>.</li>
<li><columns> is a comma-separated list of column names.</li>
<li><fcolumns> is a comma-separated list of column names. This parameter is
optional.</li>
</ul>


<p>Once an &#8216;open_index&#8217; request is issued, the HandlerSocket plugin opens the
specified index and keep it open until the client connection is closed. Each
open index is identified by <indexid>. If <indexid> is already open, the old
open index is closed. You can open the same combination of <dbname>
<tablename> <indexname> multple times, possibly with different <columns>.
For efficiency, keep <indexid> small as far as possible.</p>

<hr />

<p>Getting data</p>

<p>The &#8216;find&#8217; request has the following syntax.</p>

<pre><code>&lt;indexid&gt; &lt;op&gt; &lt;vlen&gt; &lt;v1&gt; ... &lt;vn&gt; [LIM] [IN] [FILTER ...]
</code></pre>

<p>LIM is a sequence of the following parameters.</p>

<pre><code>&lt;limit&gt; &lt;offset&gt;
</code></pre>

<p>IN is a sequence of the following parameters.</p>

<pre><code>@ &lt;icol&gt; &lt;ivlen&gt; &lt;iv1&gt; ... &lt;ivn&gt;
</code></pre>

<p>FILETER is a sequence of the following parameters.</p>

<pre><code>&lt;ftyp&gt; &lt;fop&gt; &lt;fcol&gt; &lt;fval&gt;
</code></pre>

<ul>
<li><indexid> is a number. This number must be an <indexid> specified by a
&#8216;open_index&#8217; request executed previously on the same connection.</li>
<li><op> specifies the comparison operation to use. The current version of
HandlerSocket supports &#8216;=&#8217;, &#8216;>&#8217;, &#8216;>=&#8217;, &#8216;&lt;&#8217;, and &#8216;&lt;=&#8217;.</li>
<li><vlen> indicates the length of the trailing parameters <v1> &#8230; <vn>. This
must be smaller than or equal to the number of index columns specified by
the <indexname> parameter of the corresponding &#8216;open_index&#8217; request.</li>
<li><v1> &#8230; <vn> specify the index column values to fetch.</li>
<li>LIM is optional. <limit> and <offset> are numbers. When omitted, it works
as if 1 and 0 are specified. These parameter works like LIMIT of SQL.
These values don&#8217;t include the number of records skipped by a filter.</li>
<li>IN is optional. It works like WHERE &#8230; IN syntax of SQL. <icol> must be
smaller than the number of index columns specified by the <indexname>
parameter of the corresponding &#8216;open_index&#8217; request. If IN is specified in
a find request, the <icol>-th parameter value of <v1> &#8230;  <vn> is ignored.</li>
<li>FILTERs are optional. A FILTER specifies a filter. <ftyp> is either &#8216;F&#8217;
(filter) or &#8216;W&#8217; (while). <fop> specifies the comparison operation to use.
<fcol> must be smaller than the number of columns specified by the
<fcolumns> parameter of the corresponding &#8216;open_index&#8217; request. Multiple
filters can be specified, and work as the logical AND of them. The
difference of &#8216;F&#8217; and &#8216;W&#8217; is that, when a record does not meet the
specified condition, &#8216;F&#8217; simply skips the record, and &#8216;W&#8217; stops the loop.</li>
</ul>


<hr />

<p>Updating/Deleting data</p>

<p>The &#8216;find_modify&#8217; request has the following syntax.</p>

<pre><code>&lt;indexid&gt; &lt;op&gt; &lt;vlen&gt; &lt;v1&gt; ... &lt;vn&gt; [LIM] [IN] [FILTER ...] MOD
</code></pre>

<p>MOD is a sequence of the following parameters.</p>

<pre><code>&lt;mop&gt; &lt;m1&gt; ... &lt;mk&gt;
</code></pre>

<ul>
<li><mop> is &#8216;U&#8217; (update), &#8216;+&#8217; (increment), &#8216;-&#8217; (decrement), &#8216;D&#8217; (delete),
&#8216;U?&#8217;, &#8216;+?&#8217;, &#8216;-?&#8217;, or &#8216;D?&#8217;. If the &#8216;?&#8217; suffix is specified, it returns
the contents of the records before modification (as if it&#8217;s a &#8216;find&#8217;
request), instead of the number of modified records.</li>
<li><m1> &#8230; <mk> specifies the column values to set. The length of <m1> &#8230;
<mk> must be smaller than or equal to the length of <columns> specified by
the corresponding &#8216;open_index&#8217; request. If <mop> is &#8216;D&#8217;, these parameters
are ignored. If <mop> is &#8216;+&#8217; or &#8216;-&#8216;, values must be numeric. If <mop> is
&#8217;-&#8217; and it attempts to change a column value from negative to positive or
positive to negative, the column value is not modified.</li>
</ul>


<hr />

<p>Inserting data</p>

<p>The &#8216;insert&#8217; request has the following syntax.</p>

<pre><code>&lt;indexid&gt; + &lt;vlen&gt; &lt;v1&gt; ... &lt;vn&gt;
</code></pre>

<ul>
<li><vlen> indicates the length of the trailing parameters <v1> &#8230; <vn>. This
must be smaller than or equal to the length of <columns> specified by the
corresponding &#8216;open_index&#8217; request.</li>
<li><v1> &#8230; <vn> specify the column values to set. For columns not in
<columns>, the default values for each column are set.</li>
</ul>


<hr />

<p>Authentication</p>

<p>The &#8216;auth&#8217; request has the following syntax.</p>

<pre><code>A &lt;atyp&gt; &lt;akey&gt;
</code></pre>

<ul>
<li><atyp> must be &#8216;1&#8217;</li>
<li>An &#8216;auth&#8217; request succeeds iff <akey> is the correct secret specified by
the &#8216;handlersocket_plain_secret&#8217; or &#8216;handlersocket_plain_secret_rw&#8217;.</li>
<li>If an authentication is enabled for a listener, any other requests on a
connection fail before an &#8216;auth&#8217; request succeeded on the connection.</li>
</ul>


<hr />

<p>Response syntax</p>

<p>HandlerSocket returns a response of the following syntax for each request.</p>

<pre><code>&lt;errorcode&gt; &lt;numcolumns&gt; &lt;r1&gt; ... &lt;rn&gt;
</code></pre>

<ul>
<li><errorcode> indicates whether the request has successfully executed or not.
&#8216;0&#8217; means success. Non-zero means an error.</li>
<li><numcolumns> indicates the number of columns of the result set.</li>
<li><r1> &#8230; <rn> is the result set. The length of <r1> &#8230; <rn> is always a
multiple of <numcolumns>. It is possible that <r1> &#8230; <rn> is empty.</li>
</ul>


<p>If <errorcode> is non-zero, <numcolumns> is always 1 and <r1> indicates a
human-readable error message, though sometimes <r1> is not provided.</p>

<hr />

<p>Response for &#8216;open_index&#8217;</p>

<p>If &#8216;open_index&#8217; is succeeded, HandlerSocket returns a line of the following
syntax.</p>

<pre><code>0 1
</code></pre>

<hr />

<p>Response for &#8216;find&#8217;</p>

<p>If &#8216;find&#8217; is succeeded, HandlerSocket returns a line of the following
syntax.</p>

<p>   0 <numcolumns> <r1> &#8230; <rn></p>

<ul>
<li><numcolumns> always equals to the length of <columns> of the corresponding
&#8216;open_index&#8217; request.</li>
<li><r1> &#8230; <rn> is the result set. If N rows are found, the length of <r1>
&#8230; <rn> becomes ( <numcolumns> * N ).</li>
</ul>


<hr />

<p>Response for &#8216;find_modify&#8217;</p>

<p>If &#8216;find_modify&#8217; is succeeded, HandlerSocket returns a line of the following
syntax.</p>

<p>   0 1 <nummod></p>

<ul>
<li><nummod> is the number of modified rows.</li>
<li>As an exception, if the &#8216;?&#8217; suffix is specified in <mop>, a response has
the syntax of a response for &#8216;find&#8217; instead.</li>
</ul>


<hr />

<p>Response for &#8216;insert&#8217;</p>

<p>If &#8216;insert&#8217; is succeeded, HanderSocket returns a line of the following
syntax.</p>

<p>   0 1</p>

<hr />

<p>Response for &#8216;auth&#8217;</p>

<p>If &#8216;auth&#8217; is succeeded, HanderSocket returns a line of the following syntax.</p>

<p>   0 1</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql-profiler]]></title>
    <link href="http://evsinev.github.com/blog/2013/03/30/mysql-profiler/"/>
    <updated>2013-03-30T22:38:00+04:00</updated>
    <id>http://evsinev.github.com/blog/2013/03/30/mysql-profiler</id>
    <content type="html"><![CDATA[<h2>CentOS 5 - oprofiler</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  yum install oprofiler
</span><span class='line'># run program
</span><span class='line'>  opcontrol --stop;  opcontrol --reset; opcontrol --callgraph=8; opcontrol --start; \
</span><span class='line'>    opcontrol --status; sleep 5; opcontrol --stop; opreport -l | less</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>example report</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>opreport -l --threshold 1
</span><span class='line'>warning: /no-vmlinux could not be found.
</span><span class='line'>CPU: Intel Core/i7, speed 2128.05 MHz (estimated)
</span><span class='line'>Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a unit mask of 0x00 (No unit mask) count 1000000
</span><span class='line'>samples  %        app name                 symbol name
</span><span class='line'>16787     6.6447  mysqld                   ut_delay
</span><span class='line'>15902     6.2944  no-vmlinux               /no-vmlinux
</span><span class='line'>14975     5.9275  mysqld                   insert_events_waits_history_long(PFS_events_waits*)
</span><span class='line'>9605      3.8019  mysqld                   get_thread_mutex_locker_v1
</span><span class='line'>8388      3.3202  libc-2.5.so              memcpy
</span><span class='line'>8308      3.2885  mysqld                   buf_page_get_gen
</span><span class='line'>7220      2.8579  mysqld                   rec_get_offsets_func
</span><span class='line'>6662      2.6370  mysqld                   mutex_spin_wait
</span><span class='line'>6409      2.5369  libc-2.5.so              _int_malloc
</span><span class='line'>5714      2.2618  mysqld                   cmp_dtuple_rec_with_match
</span><span class='line'>5173      2.0476  mysqld                   end_mutex_wait_v1
</span><span class='line'>4083      1.6162  mysqld                   pfs_mutex_enter_func
</span><span class='line'>3339      1.3217  mysqld                   btr_cur_search_to_nth_level
</span><span class='line'>3268      1.2936  mysqld                   get_thread_rwlock_locker_v1
</span><span class='line'>2961      1.1720  mysqld                   page_cur_search_with_match
</span><span class='line'>2761      1.0929  mysqld                   sp_instr_stmt::execute(THD*, unsigned int*)
</span><span class='line'>2647      1.0478  mysqld                   mtr_commit</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<ul>
<li>http://heeen.de/blog/2011/06/how-to-generate-fancy-callgraphs-from-oprofile.html</li>
<li>Profiling CPU on Linux with oprofile http://www.performancewiki.com/oprofile.html</li>
<li>http://people.redhat.com/wcohen/</li>
<li>http://people.redhat.com/wcohen/Fedora12OprofileTutorial.txt</li>
<li>http://www.centos.org/docs/5/html/Deployment_Guide-en-US/ch-oprofile.html</li>
<li>http://www.pixelbeat.org/programming/profiling/</li>
<li>http://kcachegrind.sourceforge.net/html/Home.html</li>
<li>http://www.ibm.com/developerworks/library/l-gnuprof.html</li>
<li>https://bugs.archlinux.org/task/17122</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for o in 0 1 2 3; do od -A d -t x1 -w4 -j$o /boot/vmlinuz | grep "1f 8b 08 00"; done
</span><span class='line'>dd if=/boot/vmlinuz bs=1 skip=_the_offset_returned_by_od_| zcat &gt; vmlinux</span></code></pre></td></tr></table></div></figure>


<h2>Archlinux - pref</h2>

<p>Install - <code>sudo pacman -S perf</code>, Run - <code>sudo perf top</code> или <code>sudo perf top -K -p 8774</code></p>

<h2>other tools</h2>

<p>vmstat</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----
</span><span class='line'> r  b   swpd   free    buff  cache   si   so    bi    bo   in   cs   us sy id wa
</span><span class='line'>
</span><span class='line'> 0  0 2119940 1414648  17980 754320    0    0     0     0  526  878   4  2 95  0
</span><span class='line'> 1  0 2119932 1407440  17988 761436   44    0  4312    96  641 12503  9  7 83  2
</span><span class='line'> 1  0 2119932 1408252  17988 760236    0    0     0     0  830 77192 22 34 44  0
</span><span class='line'> 2  0 2119932 1408308  17988 760228    0    0     0     0  765 79648 22 33 45  0</span></code></pre></td></tr></table></div></figure>


<p>gdb &#8211; http://poormansprofiler.org/</p>

<h2>Масштабирование mysql</h2>

<ol>
<li><p>мастер вставляет задания в таблицу-очередь</p></li>
<li><p>скрипт смотрит и выполняет на каждом слейве
 можно управлять какие слейвы должны выпонлять задания
 http://www.slideshare.net/highload/scaling-web-sites-by-sharding-and-replication-hl2008-rus-presentation
 13 слайд</p></li>
<li><p><a href="http://www.jurriaanpersyn.com/archives/2009/02/12/database-sharding-at-netlog-with-mysql-and-php/"><img src="http://www.jurriaanpersyn.com/projects/netlog/sharding/verticalpartitioning-slave.png" alt="Database Setup 4: Vertical Partitioning / Replication Tree" /></a></p></li>
<li><p>http://www.insight-it.ru/masshtabiruemost/segmentirovanie-bazy-dannykh/</p></li>
<li><p>https://code.google.com/p/vitess/</p></li>
</ol>


<pre><code>Репликация однопоточна и происходит недостаточно быстро.
Читать данные с мастера при Master/Slave репликации = медленная смерть
http://www.insight-it.ru/masshtabiruemost/arkhitektura-twitter-dva-goda-spustya/


http://www.insight-it.ru/goto/https://github.com/twitter/flockdb


http://www.insight-it.ru/masshtabiruemost/10-izvestnykh-masshtabiruemykh-arkhitekturnykh-shablonov/


http://habrahabr.ru/post/117453/


https://cs.dx.com/Ticket/LoginCheckReply?FormKey=C352F748341B4AF394D6CFD718D8A62E

http://yoshinorimatsunobu.blogspot.ru/2010/10/using-mysql-as-nosql-story-for.html

https://github.com/ahiguti/HandlerSocket-Plugin-for-MySQL/blob/master/docs-en/configuration-options.en.txt
</code></pre>

<p>http://poormansprofiler.org/</p>

<pre><code>http://dev.mysql.com/doc/refman/5.0/en/compile-and-link-options.html
For a connection from a client to a server running on the same host, if you connect using TCP/IP rather than a Unix socket file, performance is 7.5% slower. (On Unix, if you connect to the host name localhost, MySQL uses a socket file by default.)


iostat disk utilization


LongAdder jsr166
AtomicLong[Random.nextInteger(count)].inc();

tryLock -&gt; lock()
</code></pre>

<h2>Производительность</h2>

<ul>
<li><a href="http://smotri.com/video/view/?id=v9874073d33">Тюнинг FreeBSD 7.0 Игорь Сысоев</a> <a href="http://www.slideshare.net/Dolce727/sysoev-freebsd7?from=ss_embed#">slides</a> <a href="http://highload.com.ua/index.php/2009/06/14/%D1%82%D1%8E%D0%BD%D0%B8%D0%BD%D0%B3-freebsd-7-%D0%BF%D0%BE%D0%B4-%D0%B2%D1%8B%D1%81%D0%BE%D0%BA%D0%B8%D0%B5-%D0%BD%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B8/">video + slides</a></li>
</ul>


<h2>http performance</h2>

<p><code>httperf --hog --server=192.168.1.100 --wsess=100000,47,0 --rate 192</code></p>

<p>https://calomel.org/nginx.html</p>

<h2>mysql as nosql</h2>

<p><a href="http://yoshinorimatsunobu.blogspot.ru/2010/10/using-mysql-as-nosql-story-for.html">Using MySQL as a NoSQL - A story for exceeding 750,000 qps on a commodity server</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stm32-servo]]></title>
    <link href="http://evsinev.github.com/blog/2013/03/16/stm32-servo/"/>
    <updated>2013-03-16T17:44:00+04:00</updated>
    <id>http://evsinev.github.com/blog/2013/03/16/stm32-servo</id>
    <content type="html"><![CDATA[<p>Начинаем делать</p>

<p>http://thingiverse-production.s3.amazonaws.com/renders/d0/f3/fa/6c/79/_MG_5060_preview_featured.jpg
http://www.thingiverse.com/thing:34829</p>

<p>Код для stm32vldiscovery
https://github.com/evsinev/stm32-servo-arm</p>

<h2>References</h2>
]]></content>
  </entry>
  
</feed>
